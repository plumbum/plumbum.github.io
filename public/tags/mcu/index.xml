<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My hardware</title>
    <link>http://myhw.ru/tags/mcu/index.xml</link>
    <description>Recent content on My hardware</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <atom:link href="http://myhw.ru/tags/mcu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Компилируем для ARM</title>
      <link>http://myhw.ru/post/arm-none-eabi/</link>
      <pubDate>Thu, 08 Dec 2016 10:21:32 +0300</pubDate>
      
      <guid>http://myhw.ru/post/arm-none-eabi/</guid>
      <description>&lt;p&gt;Как известно, программный код на языке выского уровня сам в микроконтроллер не полезет,
его требуется предварительно скомпилировать в машинный код
(мы не берём интерпретируемые языки, но в этом случае в микроконтроллер должен быть уже прошит интерпретатор).
Для микроконтроллеров на базе ядра ARM/Cortex можно воспользовать кросскопилятором &lt;code&gt;gcc-arm-none-eabi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Магическое название компилятора &lt;code&gt;gcc-arm-none-eabi&lt;/code&gt; означает следующее:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc&lt;/code&gt; - название компилятора;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arm&lt;/code&gt; - архитектура процессора;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt; - компилятор не вносит никакого дополнительного bootstrap кода от себя;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eabi&lt;/code&gt; - код соответствует спецификации &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%94%D0%B2%D0%BE%D0%B8%D1%87%D0%BD%D1%8B%D0%B9_%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9&#34;&gt;EABI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gcc-arm-embedded&#34;&gt;GCC ARM Embedded&lt;/h2&gt;

&lt;p&gt;Самый простой способ, это использовать готовые &lt;a href=&#34;https://launchpad.net/gcc-arm-embedded&#34;&gt;бинарные сборки&lt;/a&gt; для своей операционной системы. Доступны сборки для Linux, Mac, Windows.&lt;/p&gt;

&lt;p&gt;Сборка уже все необходимые инструменты для компиляции ваших приложений а так же адаптированную для встраиваемых устройств стандартную библиотеку функция &lt;a href=&#34;https://sourceware.org/newlib/&#34;&gt;newlib&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TODO как распаковать и прописать пути.&lt;/p&gt;

&lt;h2 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h2&gt;

&lt;p&gt;Если у вас Ubuntu 12.04/14.04/15.&lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;16&lt;/sub&gt;.04 &lt;sup&gt;32&lt;/sup&gt;&amp;frasl;&lt;sub&gt;64&lt;/sub&gt;-bit, то вы можете воспользоваться &lt;a href=&#34;https://launchpad.net/~team-gcc-arm-embedded/+archive/ubuntu/ppa&#34;&gt;PPA репозиторием&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;debian&#34;&gt;Debian&lt;/h2&gt;

&lt;p&gt;В свою очередь Debian начиная с Jessie содержит в своих репозиториях пакетов сборку &lt;code&gt;arm-none-eabi-gcc&lt;/code&gt;. Версии пакетов не самые свежие, но как правило вполне достаточные для работы.&lt;/p&gt;

&lt;p&gt;Установить полный фарш можно командой:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install -t jessie-backports gcc-arm-none-eabi binutils-arm-none-eabi gdb-arm-none-eabi libnewlib-arm-none-eabi libnewlib-dev libstdc++-arm-none-eabi-newlib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Дополнительно можно установить документацию по &lt;code&gt;newlib&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install -t jessie-backports libnewlib-doc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Обратите внимание на параметр &lt;code&gt;-t jessie-backports&lt;/code&gt;. В моём случае он означает, что пакеты необходимо устанавливать из репозитория &lt;a href=&#34;https://backports.debian.org/&#34;&gt;backports&lt;/a&gt;, там они новее, чем в stable версии.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EmGo</title>
      <link>http://myhw.ru/post/emgo/</link>
      <pubDate>Mon, 14 Mar 2016 11:25:34 +0300</pubDate>
      
      <guid>http://myhw.ru/post/emgo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ziutek/emgo&#34;&gt;EmGo&lt;/a&gt; - язык для программирования микроконтроллеров с Go-синтаксисом.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;установка&#34;&gt;Установка&lt;/h2&gt;

&lt;p&gt;Для установки нам потребуется &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go версии 1.6+&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Получаем код:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u -v github.com/ziutek/emgo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Устанавливаем компилятор&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go install -v github.com/ziutek/emgo/egc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Прописываем пременные окружения:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export EGCC=/usr/local/arm/gcc-arm-none-eabi/bin/arm-none-eabi-gcc
export EGLD=/usr/local/arm/gcc-arm-none-eabi/bin/arm-none-eabi-ld
export EGAR=/usr/local/arm/gcc-arm-none-eabi/bin/arm-none-eabi-ar

export EGROOT=$HOME/go/src/github.com/ziutek/emgo/egroot
export EGPATH=$HOME/go/src/github.com/ziutek/emgo/egpath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для сборки бинарного файла egc использует gcc тулчейн. Можно взять например этот &lt;a href=&#34;https://launchpad.net/gcc-arm-embedded&#34;&gt;GCC ARM Embedded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Я обычно распаковываю его как есть в &lt;code&gt;/usr/local/arm&lt;/code&gt; и делаю симлинк:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/local/arm
sudo tar xvf ~/Downloads/gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2
sudo ln -s gcc-arm-none-eabi-5_2-2015q4 gcc-arm-none-eabi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Так же нужно установить &lt;code&gt;OpenOCD&lt;/code&gt;, если он ещё не установлен:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install openocd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Или можно использовать тулзу &lt;a href=&#34;https://github.com/texane/stlink&#34;&gt;StLink&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;прошивка-тестового-примера&#34;&gt;Прошивка тестового примера&lt;/h2&gt;

&lt;p&gt;После этого, можно отправится к примерам. Из коробки поддерживается демоборда &lt;code&gt;F4 Discovery&lt;/code&gt;, которая у меня была под рукоу.&lt;/p&gt;

&lt;p&gt;Сразу возьмём что нибудь по-нагляднее &lt;del&gt;с блекджеком и&amp;hellip;&lt;/del&gt; т.е. с каналами и горутинами:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $EGPATH/src/stm32/examples/f4-discovery/channels
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Мне не удалось запустить приложение из RAM, поэтому я отредактировал &lt;code&gt;script.ld&lt;/code&gt; и заменил строчку&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCLUDE stm32/loadram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;на&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCLUDE stm32/loadflash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь собираем наше приложение:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;../build.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если копиляция прошла успешно, получили бинарник в elf-е &lt;code&gt;cortexm4f.elf&lt;/code&gt;. Прошиваем его в демоплату через OpenOCD:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;../load-oocd.sh flash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Бинго! Плата начинает нам весело подмигивать всеми четырьмя светодиодами.&lt;/p&gt;

&lt;h2 id=&#34;что-дальше&#34;&gt;Что дальше?&lt;/h2&gt;

&lt;p&gt;Дальше изучать &lt;a href=&#34;https://github.com/ziutek/emgo/tree/master/egpath/src/stm32/examples&#34;&gt;примеры&lt;/a&gt;, читать &lt;a href=&#34;https://sites.google.com/site/embeddedgo/&#34;&gt;документацию&lt;/a&gt; (пока она весьма условна), писать собственные приложения.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Banana Pi</title>
      <link>http://myhw.ru/post/bananaPi/</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://myhw.ru/post/bananaPi/</guid>
      <description>&lt;p&gt;Banana Pi — семейство одноплатных компьютеров на базе микроконтроллеров с ядром ARM производства Allwinner.&lt;/p&gt;

&lt;p&gt;Может работать под управлением различных операционных систем: Android 4.2, Android 4.4, Lubuntu, Raspbian, Debian, Fedora, Arch Linux, Gentoo, openSUSE, Berryboot, FreeBSD, OpenWrt, Slackware, Tiny Core Linux.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.armbian.com/banana-pi/&#34;&gt;http://www.armbian.com/banana-pi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bananian.org/details&#34;&gt;https://www.bananian.org/details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bananian.org/download&#34;&gt;https://www.bananian.org/download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;user-define-led-green&#34;&gt;User-Define LED (Green)&lt;/h2&gt;

&lt;p&gt;Управляем светодиодом через GPIO:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo gpio &amp;gt; /sys/class/leds/green\:ph24\:led1/trigger
$ echo 255 &amp;gt; /sys/class/leds/green:ph24:led1/brightness # On
$ echo 255 &amp;gt; /sys/class/leds/green:ph24:led1/brightness # Off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Отключить триггер:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo none &amp;gt; /sys/class/leds/green\:ph24\:led1/trigger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Посмотреть все доступные триггеры&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /sys/class/leds/green\:ph24\:led1/trigger
none battery-charging-or-full battery-charging battery-charging-or-full
battery-charging-blink-full-solid ac-online usb-online mmc0 timer
heartbeat backlight [gpio] cpu0 cpu1 default-on
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>